package admin

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/TheLab-ms/conway/engine"
	"github.com/TheLab-ms/conway/modules/bootstrap"
	"strconv"
	"time"
)

const timeFormat = "Mon, Jan 2 2006"

type member struct {
	ID              int64
	AccessStatus    string
	Name            string
	Email           string
	Confirmed       bool
	Created         engine.LocalTime
	AdminNotes      string
	Leadership      bool
	NonBillable     bool
	FobID           *int64
	StripeSubID     *string
	StripeStatus    *string
	PaypalSubID     *string
	PaypalPrice     *float64
	DiscountType    *string
	RootFamilyEmail *string
	BillAnnually    bool
	FobLastSeen     *engine.LocalTime
	DiscordUserID   string
}

type memberEvent struct {
	Created time.Time
	Event   string
	Details string
}

func querySingleMember(ctx context.Context, db *sql.DB, id string) (*member, []*memberEvent, error) {
	mem := member{}
	err := db.QueryRowContext(ctx, `
		SELECT m.id, m.access_status, m.name, m.email, m.confirmed, m.created, COALESCE(m.fob_id, 0), m.admin_notes, m.leadership, m.non_billable, m.stripe_subscription_id, m.stripe_subscription_state, m.paypal_subscription_id, m.paypal_price, m.discount_type, COALESCE(rfm.email, ''), m.bill_annually, m.fob_last_seen, COALESCE(m.discord_user_id, '')
		FROM members m
		LEFT JOIN members rfm ON m.root_family_member = rfm.id
		WHERE m.id = $1`, id).
		Scan(&mem.ID, &mem.AccessStatus, &mem.Name, &mem.Email, &mem.Confirmed, &mem.Created, &mem.FobID, &mem.AdminNotes, &mem.Leadership, &mem.NonBillable, &mem.StripeSubID, &mem.StripeStatus, &mem.PaypalSubID, &mem.PaypalPrice, &mem.DiscountType, &mem.RootFamilyEmail, &mem.BillAnnually, &mem.FobLastSeen, &mem.DiscordUserID)
	if err != nil {
		return nil, nil, err
	}

	var events []*memberEvent
	results, err := db.QueryContext(ctx, "SELECT created, event, details FROM member_events WHERE member = $1 ORDER BY created DESC LIMIT 10", mem.ID)
	if err != nil {
		return nil, nil, err
	}
	defer results.Close()

	for results.Next() {
		var created int64
		event := &memberEvent{}
		if results.Scan(&created, &event.Event, &event.Details) == nil {
			event.Created = time.Unix(created, 0)
			events = append(events, event)
		}
	}

	return &mem, events, nil
}

var _ = handlePostForm(formHandler{
	Path: "/admin/members/{id}/updates/basics",
	Post: &engine.PostFormHandler{
		Fields: []string{"name", "email", "confirmed", "fob_id", "admin_notes", "bill_annually", "discord_user_id"},
		Query: `UPDATE members SET name = :name, email = :email, admin_notes = :admin_notes,
			discord_user_id = (CASE WHEN :discord_user_id != '' THEN :discord_user_id ELSE NULL END),
			confirmed = (CASE WHEN :confirmed = 'on' THEN 1 ELSE 0 END),
			bill_annually = (CASE WHEN :bill_annually = 'on' THEN 1 ELSE 0 END),
			fob_id = (CASE WHEN CAST(:fob_id AS INTEGER) = 0 THEN NULL ELSE CAST(:fob_id AS INTEGER) END)
			WHERE id = :route_id`,
	},
})

var _ = handlePostForm(formHandler{
	Path: "/admin/members/{id}/updates/designations",
	Post: &engine.PostFormHandler{
		Fields: []string{"leadership", "non_billable"},
		Query: `UPDATE members SET
			leadership = (CASE WHEN :leadership = 'on' THEN 1 ELSE 0 END),
			non_billable = (CASE WHEN :non_billable = 'on' THEN 1 ELSE 0 END)
			WHERE id = :route_id`,
	},
})

var _ = handlePostForm(formHandler{
	Path: "/admin/members/{id}/updates/discounts",
	Post: &engine.PostFormHandler{
		Fields: []string{"family_email", "discount"},
		Query: `UPDATE members SET
			discount_type = (CASE WHEN :discount = '' THEN NULL ELSE :discount END),
			root_family_member = (SELECT id FROM members WHERE email = :family_email AND root_family_member IS NULL)
			WHERE id = :route_id`,
	},
})

var _ = handlePostForm(formHandler{
	Path: "/admin/members/{id}/delete",
	Delete: &engine.DeleteFormHandler{
		Table:    "members",
		Redirect: "/admin/members",
	},
})

templ renderSingleMember(tabs []*navbarTab, member *member, events []*memberEvent) {
	@bootstrap.View() {
		@adminNav(tabs)
		<div class="container my-5">
			<div class="card">
				<div class="card-body">
					<h5 class="card-title mb-2">Basic Info</h5>
					<h6 class="card-subtitle mb-2 text-muted">Account created on { member.Created.Time.Format(timeFormat) }</h6>
					if member.FobLastSeen != nil {
						<h6 class="card-subtitle mb-2 text-muted">Last fob'd in { formatLastFobSwipe(member.FobLastSeen.Time) }</h6>
					}
					<h6 class="card-subtitle mb-4 text-muted"><a href={ templ.URL(fmt.Sprintf("/admin/members/%d/logincode", member.ID)) }>Login code</a></h6>
					if member.AccessStatus != "Ready" {
						<span class="badge text-bg-danger mb-3">{ member.AccessStatus }</span>
					}
					<form method="post" action={ templ.URL(fmt.Sprintf("/admin/members/%d/updates/basics", member.ID)) } id="basic-info-form">
						<div class="form-floating mb-2">
							<input type="text" class="form-control" id="name" name="name" value={ member.Name }/>
							<label for="name" class="form-label">Name</label>
						</div>
						<div class="input-group mb-2">
							<div class="form-floating">
								<input type="email" class="form-control" id="email" name="email" value={ member.Email }/>
								<label for="email">Email</label>
							</div>
							<div class="input-group-text">
								<label class="form-check-label" for="confirmed" style="margin-right: 5px;">Confirmed</label>
								<input type="checkbox" class="form-check-input mt-0" id="confirmed" name="confirmed" checked?={ member.Confirmed }/>
							</div>
						</div>
						<div class="input-group mb-2">
							<span class="input-group-text">Fob ID</span>
							<input type="number" class="form-control" id="fob_id" name="fob_id" value={ strconv.FormatInt(*member.FobID, 10) }/>
							<span class="input-group-text">Discord User ID</span>
							<input type="text" class="form-control" id="discord_user_id" name="discord_user_id" value={ member.DiscordUserID }/>
						</div>
						<div class="input-group mb-2">
							<input type="checkbox" class="form-check-input" id="bill_annually" name="bill_annually" checked?={ member.BillAnnually }/>
							<label class="form-check-label" for="bill_annually" style="margin-left: 5px;">Bill Annually</label>
						</div>
						<div class="form-floating mb-2">
							<textarea class="form-control" id="admin_notes" name="admin_notes" style="height: 100px">{ member.AdminNotes }</textarea>
							<label for="admin_notes" class="form-label">Admin Notes</label>
						</div>
						<button type="submit" class="btn btn-primary">Save</button>
						<button type="button" class="btn btn-secondary" onclick="document.getElementById('delete-account-link').style.display='block'">Delete</button>
					</form>
					<form method="post" action={ templ.URL(fmt.Sprintf("/admin/members/%d/delete", member.ID)) }>
						<button type="submit" class="btn btn-danger mt-3" id="delete-account-link" style="display:none;">Confirm Delete</button>
					</form>
				</div>
			</div>
			<div class="card mt-3">
				<div class="card-body">
					<h5 class="card-title mb-2">Discounts</h5>
					<form method="post" action={ templ.URL(fmt.Sprintf("/admin/members/%d/updates/discounts", member.ID)) }>
						<script>
							document.addEventListener('DOMContentLoaded', (event) => {
								const handler = () => {
									let selector = document.getElementById('discount')
									let field = document.getElementById('family-email-field')
									if (selector.value === 'family') {
										field.style.display = 'block'
									} else {
										field.style.display = 'none'
										document.getElementById('family_email').value = ''
									}
								}

								document.getElementById('discount').addEventListener('change', event => {
									handler()
								})
								handler()
							})
						</script>
						<select class="form-select" id="discount" name="discount">
							<option value="" selected?={ member.DiscountType == nil || *member.DiscountType == "" }>None</option>
							<option value="military" selected?={ member.DiscountType != nil && *member.DiscountType == "military" }>Military</option>
							<option value="retired" selected?={ member.DiscountType != nil && *member.DiscountType == "retired" }>Retired</option>
							<option value="unemployed" selected?={ member.DiscountType != nil && *member.DiscountType == "unemployed" }>Unemployed</option>
							<option value="firstResponder" selected?={ member.DiscountType != nil && *member.DiscountType == "firstResponder" }>First Responder</option>
							<option value="student" selected?={ member.DiscountType != nil && *member.DiscountType == "student" }>Student</option>
							<option value="educator" selected?={ member.DiscountType != nil && *member.DiscountType == "educator" }>Educator</option>
							<option value="emeritus" selected?={ member.DiscountType != nil && *member.DiscountType == "emeritus" }>Emeritus</option>
							<option value="family" selected?={ member.DiscountType != nil && *member.DiscountType == "family" }>Family</option>
						</select>
						<div class="mb-2 mt-2" id="family-email-field" style="display:none;">
							<label for="family_email" class="form-label">Root Family Account Email Address</label>
							<input type="email" class="form-control" id="family_email" name="family_email" value={ *member.RootFamilyEmail }/>
						</div>
						<p class="card-subtitle mt-2 text-muted">
							The discounted rate is only applied during Stripe checkout. Applying a new discount will not modify existing memberships until the member re-subscribes.
						</p>
						<button type="submit" class="btn btn-primary mt-2">Save</button>
					</form>
				</div>
			</div>
			<div class="card mt-3">
				<div class="card-body">
					<h5 class="card-title">
						Stripe
						if member.StripeStatus == nil || *member.StripeStatus != "active" {
							<span class="badge text-bg-danger">!</span>
						}
					</h5>
					<h6 class="card-subtitle mb-2 text-muted">
						Subscription status: 
						<b>
							if member.StripeStatus == nil || *member.StripeStatus == "" {
								unknown
							} else {
								{ *member.StripeStatus }
							}
						</b>
					</h6>
					if member.StripeSubID == nil || *member.StripeSubID == "" {
						<a href="#" class="btn btn-secondary disabled" aria-disabled="true">View subscription in Stripe</a>
					} else {
						<a href={ templ.URL("https://dashboard.stripe.com/subscriptions/" + *member.StripeSubID) } target="_blank" class="btn btn-primary">View subscription in Stripe</a>
					}
				</div>
			</div>
			if member.PaypalSubID != nil && *member.PaypalSubID != "" {
				<div class="card mt-3">
					<div class="card-body">
						<h5 class="card-title">Paypal</h5>
						if member.PaypalPrice != nil {
							<h6 class="card-subtitle mb-2 text-muted">
								Subscription price:
								<b>{ fmt.Sprintf("%.2f", *member.PaypalPrice) }</b>
							</h6>
						}
					</div>
				</div>
			}
			<div class="card mt-3">
				<div class="card-body">
					<h5 class="card-title mb-2">Designations</h5>
					<form method="post" action={ templ.URL(fmt.Sprintf("/admin/members/%d/updates/designations", member.ID)) }>
						<div class="form-check">
							<input type="checkbox" class="form-check-input" id="leadership" name="leadership" checked?={ member.Leadership }/>
							<label class="form-check-label" for="leadership">Leadership <i>(Conway admin access)</i></label>
						</div>
						<div class="form-check">
							<input type="checkbox" class="form-check-input" id="non-billable" name="non_billable" checked?={ member.NonBillable }/>
							<label class="form-check-label" for="non-billable">Non-billable <i>(landlord fobs, lifetime members, etc.)</i></label>
						</div>
						<button type="submit" class="btn btn-primary mt-2">Save</button>
					</form>
				</div>
			</div>
			<div class="card mt-3">
				<div class="card-body">
					<h5 class="card-title mb-2">Events</h5>
					if len(events) > 9 {
						<h6 class="card-subtitle mb-2 text-muted">Only the 10 most recent events are shown</h6>
					}
					<table class="table">
						<thead>
							<tr>
								<th scope="col">Time</th>
								<th scope="col">Event</th>
								<th scope="col">Details</th>
							</tr>
						</thead>
						<tbody>
							for _, event := range events {
								<tr>
									<td>{ event.Created.Format(time.RFC3339) }</td>
									<td><strong>{ event.Event }</strong></td>
									<td>{ event.Details }</td>
								</tr>
							}
						</tbody>
					</table>
				</div>
			</div>
		</div>
	}
}

func formatLastFobSwipe(ts time.Time) string {
	dur := time.Since(ts)

	const day = time.Hour * 24
	switch {
	case dur > day*30:
		return "on " + ts.Format(timeFormat)
	case dur > day:
		return fmt.Sprintf("%d days ago", int(dur/day))
	default:
		return "within the last day"
	}
}
