package admin

import (
	"fmt"
	"github.com/TheLab-ms/conway/modules/bootstrap"
	"strconv"
)

type navbarTab struct {
	Title string
	Path  string
}

templ adminNav(tabs []*navbarTab) {
	<nav class="navbar navbar-expand-lg bg-light">
		<div class="container-fluid">
			<a class="navbar-brand" href="/admin">Conway</a>
			<button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
				<span class="navbar-toggler-icon"></span>
			</button>
			<div class="collapse navbar-collapse" id="navbarSupportedContent">
				<ul class="navbar-nav me-auto mb-2 mb-lg-0">
					for _, tab := range tabs {
						<li class="nav-item">
							<a class="nav-link" aria-current="page" href={ templ.SafeURL(tab.Path) }>{ tab.Title }</a>
						</li>
					}
				</ul>
			</div>
		</div>
	</nav>
}

type tableRowMeta struct {
	Title string
	Width int
}

type tableRow struct {
	SelfLink string // i.e. /things/this-one's-id
	Cells    []*tableCell
}

type tableCell struct {
	Text           string
	BadgeType      string
	SelfLinkButton string
}

templ (t tableCell) Render(row *tableRow) {
	switch  {
		case t.BadgeType != "":
			<span class={ fmt.Sprintf("badge text-bg-%s", t.BadgeType) }>{ t.Text }</span>
		case t.SelfLinkButton != "":
			<a href={ templ.URL(row.SelfLink) } class="btn btn-sm btn-primary">Edit</a>
		default:
			<span>{ t.Text }</span>
	}
}

templ renderAdminList(tabs []*navbarTab, typeName, searchURL string) {
	@bootstrap.View() {
		@adminNav(tabs)
		<div class="container my-5">
			<h1 class="mb-4">{ typeName }</h1>
			<div class="card">
				<div class="card-header">
					<div class="d-flex justify-content-between align-items-center">
						<div class="d-flex align-items-center">
							<input
								type="search"
								class="form-control form-control-sm me-2"
								placeholder="Search..."
								style="width: 200px;"
								name="search"
								id="searchbox"
								hx-post={ searchURL }
								hx-trigger="input changed delay:500ms, keyup[key=='Enter'], load, change"
								hx-target="#results"
								hx-include="[name='search'], [name='currentpage']"
							/>
						</div>
					</div>
				</div>
				<span id="results"></span>
			</div>
		</div>
	}
}

templ renderAdminListElements(rowMeta []*tableRowMeta, rows []*tableRow, currentPage, totalPages int64) {
	<div class="card-body p-0">
		<div class="table-responsive">
			<table class="table table-striped table-hover mb-0">
				<thead class="table-light">
					<tr>
						for _, meta := range rowMeta {
							<th class={ fmt.Sprintf("col-%d", meta.Width) }>{ meta.Title }</th>
						}
					</tr>
				</thead>
				<tbody>
					for _, row := range rows {
						<tr onclick={ navigateToSelf(row.SelfLink) } style="cursor: pointer;">
							for _, col := range row.Cells {
								<td>
									@col.Render(row)
								</td>
							}
						</tr>
					}
				</tbody>
			</table>
		</div>
	</div>
	<div class="card-footer text-body-secondary text-center">
		@renderListPagination(currentPage, totalPages)
	</div>
}

templ renderListPagination(currentPage, totalPages int64) {
	<input type="hidden" id="currentpage" name="currentpage" value={ strconv.FormatInt(currentPage, 10) }/>
	<script>
		function updatePageCounter(offset) {
			let el = document.getElementById('currentpage')
			el.value = Number(el.value) + offset

			document.getElementById('searchbox').dispatchEvent(new Event('change', { bubbles: true }))
		}
	</script>
	<div class="btn-group">
		if currentPage > 1 {
			<a class="btn btn-primary" onclick="updatePageCounter(-1)">Previous</a>
		} else {
			<a class="btn btn-primary disabled">Previous</a>
		}
		<a class="btn btn-outline-primary disabled">{ fmt.Sprintf("Page %d of %d", currentPage, totalPages) }</a>
		if currentPage < totalPages {
			<a class="btn btn-primary" onclick="updatePageCounter(1)">Next</a>
		} else {
			<a class="btn btn-primary disabled">Next</a>
		}
	</div>
}

var intervalLabels = []string{"7 days", "30 days", "90 days"}
var intervalValues = []string{"168h", "720h", "2160h"}

templ renderMetricsAdminPage(tabs []*navbarTab, metrics []string, selected string) {
	@bootstrap.View() {
		@adminNav(tabs)
		<div class="container my-5">
			<h2 class="mb-4">Metrics</h2>
			<form method="get" class="mb-5">
				<label for="interval">Interval:</label>
				<select name="interval" id="interval" class="form-select w-auto d-inline-block ms-2" onchange="this.form.submit()">
					for i, val := range intervalValues {
						<option value={ val } selected?={ val == selected }>{ intervalLabels[i] }</option>
					}
				</select>
			</form>
			for _, name := range metrics {
				<div class="mb-5">
					<h3>{ name }</h3>
					<img src={ fmt.Sprintf("/admin/chart?series=%s&window=%s", name, selected) } style="width: 100%; padding: 8px;" />
				</div>
			}
		</div>
	}
}

script navigateToSelf(link string) {
	window.location = link
}
